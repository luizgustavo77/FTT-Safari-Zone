{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { useState, useEffect } from 'react';\nimport styles from \"./styles\";\nimport { Ionicons, Entypo } from '@expo/vector-icons';\nimport api from \"../../service/api\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function ListaPessoas(_ref) {\n  var navigation = _ref.navigation;\n  console.log('aqui');\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      lista = _useState2[0],\n      setLista = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      recarregaTela = _useState4[0],\n      setRecarregaTela = _useState4[1];\n\n  function processamentoUseEffect() {\n    return _regeneratorRuntime.async(function processamentoUseEffect$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (criarTabela) {\n              _context.next = 5;\n              break;\n            }\n\n            console.log(\"Verificando necessidade de criar tabelas...\");\n            setCriarTabela(true);\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(createTable());\n\n          case 5:\n            if (!recarregaTela) {\n              _context.next = 9;\n              break;\n            }\n\n            console.log(\"Recarregando dados...\");\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(carregaDados());\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  useEffect(function () {\n    console.log('executando useffect');\n    processamentoUseEffect();\n  }, [recarregaTela]);\n\n  function carregaDados() {\n    var resposta;\n    return _regeneratorRuntime.async(function carregaDados$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(api.get('/pessoa/getAll'));\n\n          case 3:\n            resposta = _context2.sent;\n            console.log(resposta.data);\n            setLista(resposta.data);\n            _context2.next = 11;\n            break;\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](0);\n            Alert.alert(_context2.t0.toString());\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  }\n\n  return _jsx(View, {\n    children: _jsx(ScrollView, {\n      style: styles.listaContatos,\n      children: contatos.map(function (contato, index) {\n        return _jsxs(View, {\n          style: styles.contato,\n          children: [_jsxs(Text, {\n            style: styles.listaNome,\n            children: [\" \", contato.nome]\n          }), _jsxs(View, {\n            style: styles.dadosListaTelefone,\n            children: [_jsx(Image, {\n              source: iconTelefone,\n              style: styles.iconTelefone\n            }), _jsxs(Text, {\n              style: styles.listaTelefone,\n              children: [contato.telefone, \" \"]\n            })]\n          }), _jsxs(View, {\n            style: styles.dadosBotoesAcao,\n            children: [_jsx(TouchableOpacity, {\n              onPress: function onPress() {\n                return removerElemento(contato.id);\n              },\n              children: _jsx(Ionicons, {\n                name: \"md-remove-circle\",\n                size: 32,\n                color: \"red\"\n              })\n            }), _jsx(TouchableOpacity, {\n              onPress: function onPress() {\n                return editar(contato.id);\n              },\n              children: _jsx(Entypo, {\n                name: \"edit\",\n                size: 32,\n                color: \"black\"\n              })\n            })]\n          })]\n        }, index.toString());\n      })\n    })\n  });\n}","map":{"version":3,"sources":["C:/AulaFTT/_NODE/cadPessoas/telas/pessoa/index.js"],"names":["useState","useEffect","styles","Ionicons","Entypo","api","ListaPessoas","navigation","console","log","lista","setLista","recarregaTela","setRecarregaTela","processamentoUseEffect","criarTabela","setCriarTabela","createTable","carregaDados","get","resposta","data","Alert","alert","toString","listaContatos","contatos","map","contato","index","listaNome","nome","dadosListaTelefone","iconTelefone","listaTelefone","telefone","dadosBotoesAcao","removerElemento","id","editar"],"mappings":"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","sourcesContent":["import {\r\n    Alert, Text, TextInput, TouchableOpacity,\r\n    View, Keyboard, ScrollView, Image\r\n} from 'react-native';\r\nimport { useState, useEffect } from 'react';\r\nimport styles from './styles';\r\nimport { Ionicons, Entypo } from '@expo/vector-icons';\r\nimport api from '../../service/api';\r\n\r\nexport default function ListaPessoas({navigation}) {\r\n    console.log('aqui');\r\n\r\n    const [lista, setLista] = useState([]);\r\n    const [recarregaTela, setRecarregaTela] = useState(true);\r\n\r\n\r\n    async function processamentoUseEffect() {\r\n        if (!criarTabela) {\r\n            console.log(\"Verificando necessidade de criar tabelas...\");\r\n            setCriarTabela(true);\r\n            await createTable();\r\n        }\r\n        if (recarregaTela) {\r\n            console.log(\"Recarregando dados...\");\r\n            await carregaDados();\r\n        }\r\n    }\r\n\r\n\r\n\r\n    useEffect(\r\n        () => {\r\n            console.log('executando useffect');\r\n            processamentoUseEffect(); //necessário método pois aqui não pode utilizar await...\r\n        }, [recarregaTela]);\r\n\r\n\r\n\r\n\r\n    async function carregaDados() {\r\n        try {\r\n\r\n            let resposta = (await api.get('/pessoa/getAll'));\r\n            console.log(resposta.data);\r\n            setLista(resposta.data);            \r\n\r\n        } catch (e) {\r\n            Alert.alert(e.toString());\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <View>\r\n            <ScrollView style={styles.listaContatos}>\r\n                {\r\n                    contatos.map((contato, index) => (\r\n                        <View style={styles.contato} key={index.toString()}>\r\n\r\n                            <Text style={styles.listaNome}> {contato.nome}</Text>\r\n                            <View style={styles.dadosListaTelefone}>\r\n\r\n                                <Image source={iconTelefone} style={styles.iconTelefone} />\r\n                                <Text style={styles.listaTelefone} >{contato.telefone} </Text>\r\n                            </View>\r\n\r\n                            <View style={styles.dadosBotoesAcao}>\r\n                                <TouchableOpacity onPress={() => removerElemento(contato.id)}>\r\n                                    <Ionicons name=\"md-remove-circle\" size={32} color=\"red\" />\r\n                                </TouchableOpacity>\r\n\r\n                                <TouchableOpacity onPress={() => editar(contato.id)}>\r\n                                    <Entypo name=\"edit\" size={32} color=\"black\" />\r\n                                </TouchableOpacity>\r\n\r\n                            </View>\r\n                        </View>\r\n                    ))\r\n                }\r\n\r\n            </ScrollView>\r\n\r\n        </View >\r\n    );\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}